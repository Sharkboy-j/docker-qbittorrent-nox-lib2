name: Release

on:
  schedule:
    - cron: 15 0 * * *
  workflow_dispatch:  # trigger it manually

permissions:
  attestations: write
  id-token: write
  packages: write
  contents: write

env:
  # This is a positive integer number that allows to differentiate between consecutive builds of the same qBittorrent version.
  # When `QBT_VERSION` is incremented, this value must reset to 1.
  TAG_RELEASE_NUMBER: 1
  QBT_VERSION: unknown

jobs:
  build:
    name: Release - Build
    runs-on: ubuntu-latest

    strategy:
      matrix:
        platform:
          #- "linux/386"
          - "linux/amd64"
          #- "linux/arm/v6"
          #- "linux/arm/v7"
          #- "linux/arm64/v8"
          #- "linux/riscv64"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set variables
        id: set-variables
        run: |
          echo "DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> $GITHUB_OUTPUT
          echo "PLATFORM_NAME=${{ matrix.platform }}" | sed 's|/|-|g' >> $GITHUB_OUTPUT

      - name: Fetch Local Tag
        id: fetch_local_tag
        run: |
          LATEST_LOCAL_TAG=$(curl -s https://api.github.com/repos/Sharkboy-j/docker-qbittorrent-nox-lib2/tags | jq -r '.[0].name')
          echo "QBT_LOCAL_VERSION=$LATEST_LOCAL_TAG" >> $GITHUB_ENV
          echo "Fetched version without prefix: $LATEST_LOCAL_TAG"

      - name: Fetch Latest Tag from qBittorrent
        id: fetch_tag
        run: |
          LATEST_TAG=$(curl -s https://api.github.com/repos/qbittorrent/qBittorrent/tags | jq -r '.[0].name')
          VERSION_NUMBER=$(echo "$LATEST_TAG" | sed 's/^release-//')
          echo "QBT_VERSION=$VERSION_NUMBER" >> $GITHUB_ENV
          echo "Fetched version without prefix: $VERSION_NUMBER"
          
      - name: Compare Versions and Break if Equal
        id: compare_versions
        run: |
          echo "Comparing QBT_VERSION (${{ env.QBT_VERSION }}) with QBT_LOCAL_VERSION (${{ env.QBT_LOCAL_VERSION }})"
          
          if [ "${{ env.QBT_VERSION }}" == "${{ env.QBT_LOCAL_VERSION }}" ]; then
            echo "skipnext=true" >> $GITHUB_OUTPUT
          fi
          
      - name: Set Environment Variables and Save to File
        run: |
          echo "QBT_VERSION=${{ env.QBT_VERSION }}" > versions.txt
          echo "QBT_LOCAL_VERSION=${{ env.QBT_LOCAL_VERSION }}" >> versions.txt
          
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: versions_file
          path: versions.txt
          
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        if: (matrix.platform != 'linux/386') && (matrix.platform != 'linux/amd64')
        with:
          platforms: ${{ matrix.platform }}

      - name: Set up Docker Buildx
        if : ( steps.compare_versions.outputs.skipnext  != 'true' ) 
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-config-inline: |
            [worker.oci]
              max-parallelism = 1

      - name: Build image
        uses: docker/build-push-action@v6
        if : ( steps.compare_versions.outputs.skipnext  != 'true' ) 
        with:
          build-args: |
            QBT_VERSION=${{ env.QBT_VERSION }}
          labels: |
            org.opencontainers.image.authors=https://github.com/qbittorrent/qBittorrent/graphs/contributors
            org.opencontainers.image.base.name=docker.io/alpine:latest
            org.opencontainers.image.description=An advanced BitTorrent client programmed in C++, based on Qt toolkit and libtorrent-rasterbar
            org.opencontainers.image.documentation=https://github.com/sharkboy-j/docker-qbittorrent-nox-lib2#qbittorrent-nox-docker-image-
            org.opencontainers.image.created=${{ steps.set-variables.outputs.DATE }}
            org.opencontainers.image.licenses=GPL-3.0+
            org.opencontainers.image.ref.name=${{ env.QBT_VERSION }}-${{ env.TAG_RELEASE_NUMBER }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.source=https://github.com/sharkboy-j/docker-qbittorrent-nox-lib2
            org.opencontainers.image.title=qbittorrent-nox docker image
            org.opencontainers.image.url=https://github.com/sharkboy-j/docker-qbittorrent-nox-lib2
            org.opencontainers.image.vendor=qBittorrent
            org.opencontainers.image.version=${{ env.QBT_VERSION }}
          load: true
          platforms: ${{ matrix.platform }}
          tags: |
            sharkboy/qbittorrent-nox-lib2:latest-${{ steps.set-variables.outputs.PLATFORM_NAME }}
            ghcr.io/sharkboy-j/docker-qbittorrent-nox-lib2:latest-${{ steps.set-variables.outputs.PLATFORM_NAME }}

      - name: Test run
        if : ( steps.compare_versions.outputs.skipnext  != 'true' ) 
        run: |
          docker run \
            --entrypoint "/usr/bin/qbittorrent-nox" \
            --platform ${{ matrix.platform }} \
            sharkboy/qbittorrent-nox-lib2:latest-${{ steps.set-variables.outputs.PLATFORM_NAME }} \
            --version

      # To run the image locally:
      # 1. `docker load < artifact`
      # 2. remove `build` field and replace `image` field with the imported image in docker-compose.yml
      # 3. `docker compose up`
      - name: Export image
        if : ( steps.compare_versions.outputs.skipnext  != 'true' ) 
        run: |
          docker tag \
            sharkboy/qbittorrent-nox-lib2:latest-${{ steps.set-variables.outputs.PLATFORM_NAME }} \
            sharkboy/qbittorrent-nox-lib2:${{ env.QBT_VERSION }}
          docker save \
            --output qbittorrent-nox_${{ env.QBT_VERSION }}_${{ steps.set-variables.outputs.PLATFORM_NAME }} \
            sharkboy/qbittorrent-nox-lib2:${{ env.QBT_VERSION }}

      - name: Upload artifacts
        if : ( steps.compare_versions.outputs.skipnext  != 'true' ) 
        uses: actions/upload-artifact@v4
        with:
          name: qbittorrent-nox_${{ env.QBT_VERSION }}_${{ steps.set-variables.outputs.PLATFORM_NAME }}
          path: qbittorrent-nox_${{ env.QBT_VERSION }}_${{ steps.set-variables.outputs.PLATFORM_NAME }}

      - name: Generate build provenace attestations
        if : ( steps.compare_versions.outputs.skipnext  != 'true' ) 
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: qbittorrent-nox_${{ env.QBT_VERSION }}_${{ steps.set-variables.outputs.PLATFORM_NAME }}

      - name: Login to Docker Hub
        if : ( steps.compare_versions.outputs.skipnext  != 'true' ) 
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Login to GitHub Container registry
        if : ( steps.compare_versions.outputs.skipnext  != 'true' ) 
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Upload to registries
        if : ( steps.compare_versions.outputs.skipnext  != 'true' ) 
        run: |
          docker push sharkboy/qbittorrent-nox-lib2:latest-${{ steps.set-variables.outputs.PLATFORM_NAME }}
          docker push ghcr.io/sharkboy-j/docker-qbittorrent-nox-lib2:latest-${{ steps.set-variables.outputs.PLATFORM_NAME }}
          
      - name: Get Changelog for Specific Version
        if : ( steps.compare_versions.outputs.skipnext  != 'true' ) 
        run: |
          VERSION=${{ env.QBT_VERSION }}  # Specify the version you're interested in
          REPO="qbittorrent/qBittorrent"
          FILE_PATH="Changelog"
          
          # Fetch the changelog file content using GitHub API (raw URL)
          CHANGES=$(curl -s "https://raw.githubusercontent.com/$REPO/master/$FILE_PATH")
          
          # Use awk to extract the section for the specified version
          CHANGELOG_SECTION=$(echo "$CHANGES" | awk "/$VERSION/{flag=1} flag && /^$/{flag=0} flag" )
          
          # Output the extracted changelog for the specific version
          echo "$CHANGELOG_SECTION"
          echo "$CHANGELOG_SECTION" > changelog.txt
          
      - name: Create GitHub Tag
        if : ( steps.compare_versions.outputs.skipnext  != 'true' ) 
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ env.QBT_VERSION }} --latest --notes-file changelog.txt
          gh release delete $QBT_LOCAL_VERSION --cleanup-tag

  upload:
    name: Release - Upload
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: versions_file
          path: .
          
      - name: Read and Set Environment Variables
        run: |
          source versions.txt
          echo "QBT_VERSION is $QBT_VERSION"
          echo "QBT_LOCAL_VERSION is $QBT_LOCAL_VERSION"
          echo "QBT_VERSION=$QBT_VERSION" >> $GITHUB_ENV
          echo "QBT_LOCAL_VERSION=$QBT_LOCAL_VERSION" >> $GITHUB_ENV
          
      - name: Compare Versions and Break if Equal
        id: compare_versions
        run: |
          echo "Comparing QBT_VERSION (${{ env.QBT_VERSION }}) with QBT_LOCAL_VERSION (${{ env.QBT_LOCAL_VERSION }})"
          
          if [ "${{ env.QBT_VERSION }}" == "${{ env.QBT_LOCAL_VERSION }}" ]; then
            echo "skipnext=true" >> $GITHUB_OUTPUT
          fi
          
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        if : ( steps.compare_versions.outputs.skipnext  != 'true' ) 
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Login to GitHub Container registry
        if : ( steps.compare_versions.outputs.skipnext  != 'true' ) 
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}
          
      - name: Create multi-arch images
        if : ( steps.compare_versions.outputs.skipnext  != 'true' ) 
        run: |
          docker manifest create \
            sharkboy/qbittorrent-nox-lib2:${{ env.QBT_VERSION }}-${{ env.TAG_RELEASE_NUMBER }} \
            --amend sharkboy/qbittorrent-nox-lib2:latest-linux-amd64
          docker manifest create \
            sharkboy/qbittorrent-nox-lib2:latest \
            --amend sharkboy/qbittorrent-nox-lib2:latest-linux-amd64
          docker manifest create \
            ghcr.io/sharkboy-j/docker-qbittorrent-nox-lib2:${{ env.QBT_VERSION }}-${{ env.TAG_RELEASE_NUMBER }} \
            --amend ghcr.io/sharkboy-j/docker-qbittorrent-nox-lib2:latest-linux-amd64
          docker manifest create \
            ghcr.io/sharkboy-j/docker-qbittorrent-nox-lib2:latest \
            --amend ghcr.io/sharkboy-j/docker-qbittorrent-nox-lib2:latest-linux-amd64

      - name: Upload to registries
        if : ( steps.compare_versions.outputs.skipnext  != 'true' ) 
        run: |
          docker manifest push sharkboy/qbittorrent-nox-lib2:${{ env.QBT_VERSION }}-${{ env.TAG_RELEASE_NUMBER }}
          docker manifest push sharkboy/qbittorrent-nox-lib2:latest
          docker manifest push ghcr.io/sharkboy-j/docker-qbittorrent-nox-lib2:${{ env.QBT_VERSION }}-${{ env.TAG_RELEASE_NUMBER }}
          docker manifest push ghcr.io/sharkboy-j/docker-qbittorrent-nox-lib2:latest
          echo "::notice Remember to remove latest-* tags from Docker Hub!"
          
      - name: Send Telegram Notification
        if : ( steps.compare_versions.outputs.skipnext  != 'true' ) 
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_BOT_ID }}
        run: |
          curl -s -o /dev/null -X POST https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage \
            -d chat_id=$TELEGRAM_CHAT_ID \
            -d text="QBT Realeased ${{ env.QBT_VERSION }} ${{ env.TAG_RELEASE_NUMBER }} "
